/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./App/js/index.js":
/*!*************************!*\
  !*** ./App/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map.js */ \"./App/js/map.js\");\n/* harmony import */ var _ui_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.js */ \"./App/js/ui.js\");\n/* harmony import */ var _webcam_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webcam.js */ \"./App/js/webcam.js\");\n\r\n\r\n//import './ajax.js';\r\n\r\n// Additional JS imports if needed\n\n//# sourceURL=webpack://pr3/./App/js/index.js?");

/***/ }),

/***/ "./App/js/map.js":
/*!***********************!*\
  !*** ./App/js/map.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    if (document.getElementById('map')) {\r\n        let map = L.map('map').setView([41.3851, 2.1734], 8);\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 19,\r\n        }).addTo(map);\r\n\r\n        if (window.machines) {\r\n            window.machines.forEach(m => {\r\n                if (m.latitude && m.longitude) {\r\n                    let marker = L.marker([m.latitude, m.longitude]).addTo(map)\r\n                        .bindPopup(`<strong>${m.model}</strong><br>${m.manufacturer}<br><a href=\"/machines/detail/${m.id_machine}\" class=\"text-blue-500 underline\">View details</a>`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\n\n//# sourceURL=webpack://pr3/./App/js/map.js?");

/***/ }),

/***/ "./App/js/ui.js":
/*!**********************!*\
  !*** ./App/js/ui.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Close modal\r\n    document.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('close-modal')) {\r\n            document.getElementById('modal-container').classList.add('hidden');\r\n            document.getElementById('modal-container').innerHTML = '';\r\n        }\r\n    });\r\n\r\n    // Edit handlers\r\n    document.addEventListener('click', (e) => {\r\n        // Edit user\r\n        if (e.target.classList.contains('edit-user')) {\r\n            e.preventDefault();\r\n            const userId = e.target.dataset.userId;\r\n            fetch(`/ajax/user-edit-form?id=${userId}`)\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Edit machine\r\n        if (e.target.classList.contains('edit-machine')) {\r\n            e.preventDefault();\r\n            const machineId = e.target.dataset.machineId;\r\n            fetch(`/ajax/machine-edit-form?id=${machineId}`)\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Edit incident\r\n        if (e.target.classList.contains('edit-incident')) {\r\n            e.preventDefault();\r\n            const incidentId = e.target.dataset.incidentId;\r\n            fetch(`/ajax/incident-edit-form?id=${incidentId}`)\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Edit maintenance\r\n        if (e.target.classList.contains('edit-maintenance')) {\r\n            e.preventDefault();\r\n            const maintenanceId = e.target.dataset.maintenanceId;\r\n            fetch(`/ajax/maintenance-edit-form?id=${maintenanceId}`)\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n    });\r\n\r\n    // Add handlers\r\n    document.addEventListener('click', (e) => {\r\n        // Add machine modal\r\n        if (e.target.classList.contains('add-machine')) {\r\n            e.preventDefault();\r\n            console.log('Add machine button clicked'); // Para debugging\r\n            fetch('/ajax/machine-add-form')\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                    \r\n                    // Initialize webcam after modal is loaded\r\n                    initializeWebcam();\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Add user modal\r\n        if (e.target.classList.contains('add-user')) {\r\n            e.preventDefault();\r\n            fetch('/ajax/user-add-form')\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Add maintenance modal\r\n        if (e.target.classList.contains('add-maintenance')) {\r\n            e.preventDefault();\r\n            fetch('/ajax/maintenance-add-form')\r\n                .then(response => response.text())\r\n                .then(html => {\r\n                    const mc = document.getElementById('modal-container');\r\n                    mc.innerHTML = html;\r\n                    mc.classList.remove('hidden');\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n    });\r\n\r\n    // Form submissions\r\n    document.addEventListener('submit', (e) => {\r\n        // User update\r\n        if (e.target.id === 'edit-user-form') {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const userId = form.dataset.userId;\r\n            const formData = new FormData(form);\r\n            formData.append('id', userId);\r\n\r\n            fetch('/ajax/user-update', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    const row = document.querySelector(`tr[data-user-id=\"${userId}\"]`);\r\n                    if (row) {\r\n                        row.querySelector('td:nth-child(1)').textContent = `${formData.get('name')} ${formData.get('surname')}`;\r\n                        row.querySelector('td:nth-child(3)').textContent = formData.get('email');\r\n                    }\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n                    // Mensaje Ãºnico\r\n                    alert('User updated successfully');\r\n                } else {\r\n                    alert('Error updating user: ' + data.message);\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Machine update\r\n        if (e.target.id === 'edit-machine-form') {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const machineId = form.dataset.machineId;\r\n            const formData = new FormData(form);\r\n            formData.append('id', machineId);\r\n\r\n            fetch('/ajax/machine-update', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    const row = document.querySelector(`tr[data-machine-id=\"${machineId}\"]`);\r\n                    if (row) {\r\n                        row.querySelector('td:nth-child(1)').textContent = formData.get('model');\r\n                        row.querySelector('td:nth-child(2)').textContent = formData.get('manufacturer');\r\n                        row.querySelector('td:nth-child(3)').textContent = formData.get('serial_number');\r\n                    }\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n                    // Mostrar mensaje de Ã©xito una sola vez\r\n                    alert('Machine updated successfully');\r\n                } else {\r\n                    alert('Error updating machine: ' + data.message);\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Incident update\r\n        if (e.target.id === 'edit-incident-form') {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const incidentId = form.dataset.incidentId;\r\n            const formData = new FormData(form);\r\n            formData.append('id', incidentId);\r\n\r\n            fetch('/ajax/incident-update', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    const row = document.querySelector(`tr[data-incident-id=\"${incidentId}\"]`);\r\n                    if (row) {\r\n                        row.querySelector('td:nth-child(1)').textContent = formData.get('description');\r\n                        row.querySelector('td:nth-child(2)').textContent = formData.get('priority');\r\n                        row.querySelector('td:nth-child(3)').textContent = formData.get('status');\r\n                    }\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Maintenance update\r\n        if (e.target.id === 'edit-maintenance-form') {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const maintenanceId = form.dataset.maintenanceId;\r\n            const formData = new FormData(form);\r\n            formData.append('id', maintenanceId);\r\n\r\n            fetch('/ajax/maintenance-update', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    const row = document.querySelector(`tr[data-maintenance-id=\"${maintenanceId}\"]`);\r\n                    if (row) {\r\n                        row.querySelector('td:nth-child(1)').textContent = formData.get('type');\r\n                        row.querySelector('td:nth-child(2)').textContent = formData.get('description');\r\n                        row.querySelector('td:nth-child(3)').textContent = formData.get('date');\r\n                        row.querySelector('td:nth-child(4)').textContent = formData.get('time_spent') + 'h';\r\n                    }\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n                    alert('Maintenance updated successfully');\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Add machine form submission\r\n        if (e.target.id === 'add-machine-form') {\r\n            e.preventDefault();\r\n            console.log('Form submitted'); // Para debugging\r\n            const form = e.target;\r\n            const formData = new FormData(form);\r\n\r\n            // Deshabilitar el botÃ³n de submit para evitar mÃºltiples envÃ­os\r\n            const submitButton = form.querySelector('button[type=\"submit\"]');\r\n            submitButton.disabled = true;\r\n\r\n            fetch('/ajax/machine-store', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    // Add new row to table\r\n                    const tbody = document.querySelector('table tbody');\r\n                    const newRow = document.createElement('tr');\r\n                    newRow.setAttribute('data-machine-id', data.machine.id_machine);\r\n                    newRow.innerHTML = `\r\n                        <td class=\"p-4\">${formData.get('model')}</td>\r\n                        <td class=\"p-4\">${formData.get('manufacturer')}</td>\r\n                        <td class=\"p-4\">${formData.get('serial_number')}</td>\r\n                        <td class=\"p-4\">\r\n                            <a href=\"/machines/detail/${data.machine.id_machine}\" class=\"text-blue-600 hover:underline\">Detail</a>\r\n                            <button class=\"edit-machine text-yellow-600 hover:underline\" data-machine-id=\"${data.machine.id_machine}\">Edit</button>\r\n                        </td>\r\n                    `;\r\n                    tbody.insertBefore(newRow, tbody.firstChild);\r\n\r\n                    // Close modal\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n\r\n                    // Show success message\r\n                    alert('Machine added successfully');\r\n\r\n                    // Limpiar el formulario\r\n                    form.reset();\r\n                } else {\r\n                    alert('Error adding machine: ' + data.message);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n                alert('Error adding machine');\r\n            })\r\n            .finally(() => {\r\n                // Re-habilitar el botÃ³n de submit\r\n                submitButton.disabled = false;\r\n            });\r\n        }\r\n\r\n        // Add maintenance form submission\r\n        if (e.target.id === 'add-maintenance-form') {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const formData = new FormData(form);\r\n\r\n            fetch('/ajax/maintenance-store', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    const tbody = document.querySelector('table tbody');\r\n                    const newRow = document.createElement('tr');\r\n                    newRow.setAttribute('data-maintenance-id', data.maintenance.id_maintenance);\r\n                    newRow.innerHTML = `\r\n                        <td class=\"p-4\">${formData.get('type')}</td>\r\n                        <td class=\"p-4\">${formData.get('description')}</td>\r\n                        <td class=\"p-4\">${formData.get('date')}</td>\r\n                        <td class=\"p-4\">${formData.get('time_spent')}h</td>\r\n                        <td class=\"p-4\"></td>\r\n                        <td class=\"p-4\">\r\n                            <button class=\"edit-maintenance text-yellow-600 hover:underline\" data-maintenance-id=\"${data.maintenance.id_maintenance}\">Edit</button>\r\n                            <button class=\"delete-maintenance text-red-600 hover:underline\" data-maintenance-id=\"${data.maintenance.id_maintenance}\">Delete</button>\r\n                        </td>\r\n                    `;\r\n                    tbody.insertBefore(newRow, tbody.firstChild);\r\n\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n                    alert('Maintenance added successfully');\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n\r\n        // Add user form submission\r\n        if (e.target.id === 'add-user-form') {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const formData = new FormData(form);\r\n\r\n            fetch('/ajax/user-store', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.result === 'ok') {\r\n                    const tbody = document.querySelector('table tbody');\r\n                    const newRow = document.createElement('tr');\r\n                    newRow.setAttribute('data-user-id', data.user.id_user);\r\n                    newRow.innerHTML = `\r\n                        <td class=\"p-4\">${formData.get('name')} ${formData.get('surname')}</td>\r\n                        <td class=\"p-4\">${formData.get('username')}</td>\r\n                        <td class=\"p-4\">${formData.get('email')}</td>\r\n                        <td class=\"p-4\">${formData.get('role')}</td>\r\n                        <td class=\"p-4\">\r\n                            <button class=\"edit-user text-yellow-600 hover:underline\" data-user-id=\"${data.user.id_user}\">Edit</button>\r\n                            <button class=\"delete-user text-red-600 hover:underline\" data-user-id=\"${data.user.id_user}\">Delete</button>\r\n                        </td>\r\n                    `;\r\n                    tbody.insertBefore(newRow, tbody.firstChild);\r\n\r\n                    const modal = document.getElementById('modal-container');\r\n                    modal.classList.add('hidden');\r\n                    modal.innerHTML = '';\r\n                    alert('User added successfully');\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n    });\r\n\r\n    // Delete handlers\r\n    document.addEventListener('click', (e) => {\r\n        // Delete user\r\n        if (e.target.classList.contains('delete-user')) {\r\n            if (confirm('Are you sure you want to delete this user?')) {\r\n                const userId = e.target.dataset.userId;\r\n                const formData = new FormData();\r\n                formData.append('id', userId);\r\n\r\n                fetch('/ajax/user-delete', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.result === 'ok') {\r\n                        const row = document.querySelector(`tr[data-user-id=\"${userId}\"]`);\r\n                        if (row) row.remove();\r\n                        const modal = document.getElementById('modal-container');\r\n                        modal.classList.add('hidden');\r\n                        modal.innerHTML = '';\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n            }\r\n        }\r\n\r\n        // Delete machine\r\n        if (e.target.classList.contains('delete-machine')) {\r\n            if (confirm('Are you sure you want to delete this machine?')) {\r\n                const machineId = e.target.dataset.machineId;\r\n                const formData = new FormData();\r\n                formData.append('id', machineId);\r\n\r\n                fetch('/ajax/machine-delete', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.result === 'ok') {\r\n                        const row = document.querySelector(`tr[data-machine-id=\"${machineId}\"]`);\r\n                        if (row) row.remove();\r\n                        const modal = document.getElementById('modal-container');\r\n                        modal.classList.add('hidden');\r\n                        modal.innerHTML = '';\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n            }\r\n        }\r\n\r\n        // Delete incident\r\n        if (e.target.classList.contains('delete-incident')) {\r\n            if (confirm('Are you sure you want to delete this incident?')) {\r\n                const incidentId = e.target.dataset.incidentId;\r\n                const formData = new FormData();\r\n                formData.append('id', incidentId);\r\n\r\n                fetch('/ajax/incident-delete', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.result === 'ok') {\r\n                        const row = document.querySelector(`tr[data-incident-id=\"${incidentId}\"]`);\r\n                        if (row) row.remove();\r\n                        const modal = document.getElementById('modal-container');\r\n                        modal.classList.add('hidden');\r\n                        modal.innerHTML = '';\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n            }\r\n        }\r\n\r\n        // Delete maintenance\r\n        if (e.target.classList.contains('delete-maintenance')) {\r\n            if (confirm('Are you sure you want to delete this maintenance record?')) {\r\n                const maintenanceId = e.target.dataset.maintenanceId;\r\n                const formData = new FormData();\r\n                formData.append('id', maintenanceId);\r\n\r\n                fetch('/ajax/maintenance-delete', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.result === 'ok') {\r\n                        const row = document.querySelector(`tr[data-maintenance-id=\"${maintenanceId}\"]`);\r\n                        if (row) row.remove();\r\n                        const modal = document.getElementById('modal-container');\r\n                        modal.classList.add('hidden');\r\n                        modal.innerHTML = '';\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n// Add this function to handle webcam initialization\r\nfunction initializeWebcam() {\r\n    let stream = null;\r\n    const webcamBtn = document.getElementById('webcam-btn');\r\n    const video = document.getElementById('webcam-video');\r\n    const canvas = document.getElementById('webcam-canvas');\r\n    const captureBtn = document.getElementById('webcam-capture-btn');\r\n    const retakeBtn = document.getElementById('retake-btn');\r\n    const previewContainer = document.getElementById('preview-container');\r\n    const webcamInput = document.getElementById('webcam_image');\r\n    const fileInputContainer = document.getElementById('file-input-container');\r\n\r\n    if (webcamBtn) {\r\n        webcamBtn.addEventListener('click', async () => {\r\n            try {\r\n                stream = await navigator.mediaDevices.getUserMedia({ \r\n                    video: { \r\n                        width: 320, \r\n                        height: 240 \r\n                    } \r\n                });\r\n                video.srcObject = stream;\r\n                video.style.display = 'block';\r\n                captureBtn.style.display = 'inline-block';\r\n                fileInputContainer.style.display = 'none';\r\n                await video.play();\r\n            } catch (err) {\r\n                console.error('Error accessing webcam:', err);\r\n                alert('Could not access webcam. Please use file upload instead.');\r\n            }\r\n        });\r\n    }\r\n\r\n    if (captureBtn) {\r\n        captureBtn.addEventListener('click', () => {\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            const dataURL = canvas.toDataURL('image/jpeg', 0.8);\r\n            webcamInput.value = dataURL;\r\n\r\n            const previewImg = document.createElement('img');\r\n            previewImg.src = dataURL;\r\n            previewImg.classList.add('mt-2', 'border', 'w-64');\r\n            previewContainer.innerHTML = '';\r\n            previewContainer.appendChild(previewImg);\r\n\r\n            video.style.display = 'none';\r\n            captureBtn.style.display = 'none';\r\n            retakeBtn.style.display = 'inline-block';\r\n\r\n            if (stream) {\r\n                stream.getTracks().forEach(track => track.stop());\r\n            }\r\n        });\r\n    }\r\n\r\n    if (retakeBtn) {\r\n        retakeBtn.addEventListener('click', async () => {\r\n            try {\r\n                previewContainer.innerHTML = '';\r\n                webcamInput.value = '';\r\n\r\n                stream = await navigator.mediaDevices.getUserMedia({ \r\n                    video: { \r\n                        width: 320, \r\n                        height: 240 \r\n                    } \r\n                });\r\n                video.srcObject = stream;\r\n                video.style.display = 'block';\r\n                await video.play();\r\n\r\n                captureBtn.style.display = 'inline-block';\r\n                retakeBtn.style.display = 'none';\r\n            } catch (err) {\r\n                console.error('Error restarting webcam:', err);\r\n                alert('Could not restart webcam. Please refresh the page.');\r\n            }\r\n        });\r\n    }\r\n}\n\n//# sourceURL=webpack://pr3/./App/js/ui.js?");

/***/ }),

/***/ "./App/js/webcam.js":
/*!**************************!*\
  !*** ./App/js/webcam.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// Example code for capturing images from webcam.\r\n// If not needed, you can remove or adjust.\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const webcamBtn = document.getElementById('webcam-btn');\r\n    const webcamVideo = document.getElementById('webcam-video');\r\n    const webcamCaptureBtn = document.getElementById('webcam-capture-btn');\r\n    const webcamCanvas = document.getElementById('webcam-canvas');\r\n    const webcamInput = document.getElementById('webcam-input');\r\n\r\n    if (webcamBtn && webcamVideo && webcamCaptureBtn && webcamCanvas && webcamInput) {\r\n        let stream = null;\r\n        webcamBtn.addEventListener('click', async () => {\r\n            stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n            webcamVideo.srcObject = stream;\r\n            webcamVideo.play();\r\n        });\r\n\r\n        webcamCaptureBtn.addEventListener('click', () => {\r\n            let ctx = webcamCanvas.getContext('2d');\r\n            ctx.drawImage(webcamVideo, 0, 0, webcamCanvas.width, webcamCanvas.height);\r\n            let dataURL = webcamCanvas.toDataURL('image/jpeg');\r\n            webcamInput.value = dataURL;\r\n            stream.getTracks().forEach(t => t.stop());\r\n        });\r\n    }\r\n});\n\n//# sourceURL=webpack://pr3/./App/js/webcam.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./App/js/index.js");
/******/ 	
/******/ })()
;